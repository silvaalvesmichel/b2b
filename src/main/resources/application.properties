spring.application.name=b2b

server.port=8080

# SpringDoc OpenAPI / Swagger UI
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.show-actuator=false
springdoc.swagger-ui.csrf.enabled=false
springdoc.swagger-ui.use-root-path=false
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs
management.endpoints.web.exposure.include=*
springdoc.use-management-port=false
management.endpoint.helth.group.custom.incluse=diskSpace,ping
management.endpoint.helth.group.custom.show-components=always
management.endpoint.helth.group.custom.show-details=always
management.endpoint.helth.show-details=always
management.endpoint.helth.probes.enabled=true

## sem docker compose ##
spring.datasource.url=jdbc:postgresql://localhost:5432/pedidos_db
spring.datasource.username=admin
spring.datasource.password=admin
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgresPlusDialect

## com docker compose ##
# PostgreSQL Datasource (configurado via variáveis de ambiente)
#spring.datasource.url=${DB_URL}
#spring.datasource.username=${DB_USER}
#spring.datasource.password=${DB_PASS}
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# aws #
cloud.aws.region.static=us-east-1
cloud.aws.credentials.access-key=test
cloud.aws.credentials.secret-key=test
cloud.aws.stack.auto=false
cloud.aws.endpoint.sqs=http://localhost:4566
cloud.aws.endpoint.sns=http://localhost:4566

spring.cloud.aws.region.static=us-east-1
spring.cloud.aws.credentials.access-key=test
spring.cloud.aws.credentials.secret-key=test

spring.cloud.aws.sqs.endpoint=http://localhost:4566
spring.cloud.aws.sqs.queue-name-resolver.dynamic=true

#logs#
logging.level.io.awspring.cloud=DEBUG



